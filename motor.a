;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include "motor.h"
;void motor_set()
; 0001 0005 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0006 
; 0001 0007 PORTD.2 = 0;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0001 0008 PORTD.3 = 0;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 0009 PORTD.4 = 0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0001 000A PORTD.5 = 0;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0001 000B PORTD.6 = 0;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0001 000C PORTD.7 = 0;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0001 000D 
; 0001 000E DDRD.2 = 1;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0001 000F DDRD.3 = 1;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0001 0010 DDRD.4 = 1;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0001 0011 DDRD.5 = 1;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0001 0012 DDRD.6 = 1;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0001 0013 DDRD.7 = 1;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0001 0014 
; 0001 0015 // Timer/Counter 1 initialization
; 0001 0016 // Clock source: System Clock
; 0001 0017 // Clock value: 10.800 kHz
; 0001 0018 // Mode: Fast PWM top=00FFh
; 0001 0019 // OC1A output: Non-Inv.
; 0001 001A // OC1B output: Non-Inv.
; 0001 001B // Noise Canceler: Off
; 0001 001C // Input Capture on Falling Edge
; 0001 001D // Timer 1 Overflow Interrupt: Off
; 0001 001E // Input Capture Interrupt: Off
; 0001 001F // Compare A Match Interrupt: Off
; 0001 0020 // Compare B Match Interrupt: Off
; 0001 0021 TCCR1A=0xA1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 0022 TCCR1B=0x0D;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0001 0023 TCNT1H=0x00;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0001 0024 TCNT1L=0x00;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0001 0025 ICR1H=0x00;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0001 0026 ICR1L=0x00;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0001 0027 OCR1AH=0x00;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0001 0028 OCR1AL=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0001 0029 OCR1BH=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0001 002A OCR1BL=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0001 002B }
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;
;void motor(unsigned char dir, unsigned int speed)
; 0001 002E {
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0001 002F 
; 0001 0030      if(dir == CW)
;	dir -> Y+2
;	speed -> Y+0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0001 0031      {
; 0001 0032           CS0_R=0;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0001 0033           CS1_R=1;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0001 0034 
; 0001 0035      }
; 0001 0036      else if(dir == CCW)
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0001 0037      {
; 0001 0038           CS0_R=1;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0001 0039           CS1_R=0;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0001 003A      }
; 0001 003B      else
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0001 003C      {
; 0001 003D           CS0_R=1;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0001 003E           CS1_R=1;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0001 003F      }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0001 0040 
; 0001 0041      PWM_R = speed;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0001 0042 }
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;
