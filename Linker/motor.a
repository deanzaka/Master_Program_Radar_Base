;#include <mega162.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000004 VOL: 0
	#endif
;PCODE: $00000005 VOL: 0
;PCODE: $00000006 VOL: 0
;#include <delay.h>
;#include "motor.h"
;void motor_set()
; 0001 0005 {

	.CSEG
;PCODE: $00000007 VOL: 0
;PCODE: $00000008 VOL: 0
; 0001 0006 
; 0001 0007 
; 0001 0008 PORTD.5 = 0;
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
; 0001 0009 PORTD.6 = 0;
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
; 0001 000A PORTD.7 = 0;
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 000B 
; 0001 000C 
; 0001 000D DDRD.5 = 1;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0001 000E DDRD.6 = 1;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 000F DDRD.7 = 1;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0001 0010 
; 0001 0011 // Timer/Counter 1 initialization
; 0001 0012 // Clock source: System Clock
; 0001 0013 // Clock value: 11059,200 kHz
; 0001 0014 // Mode: Fast PWM top=0x03FF
; 0001 0015 // OC1A output: Non-Inv.
; 0001 0016 // OC1B output: Non-Inv.
; 0001 0017 // Noise Canceler: Off
; 0001 0018 // Input Capture on Falling Edge
; 0001 0019 // Timer1 Overflow Interrupt: Off
; 0001 001A // Input Capture Interrupt: Off
; 0001 001B // Compare A Match Interrupt: Off
; 0001 001C // Compare B Match Interrupt: Off
; 0001 001D TCCR1A=0xA3;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0001 001E TCCR1B=0x09;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0001 001F TCNT1H=0x00;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0001 0020 TCNT1L=0x00;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0001 0021 ICR1H=0x00;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0001 0022 ICR1L=0x00;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0001 0023 OCR1AH=0x00;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0001 0024 OCR1AL=0x00;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0001 0025 OCR1BH=0x00;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0001 0026 OCR1BL=0x00;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 0027 }
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;
;void motor(unsigned char dir, unsigned int speed)
; 0001 002A {
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0001 002B 
; 0001 002C      if(dir == CW)
;	dir -> Y+2
;	speed -> Y+0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0001 002D      {
; 0001 002E           CS0_R=0;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0001 002F           CS1_R=1;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0001 0030 
; 0001 0031      }
; 0001 0032      else if(dir == CCW)
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0001 0033      {
; 0001 0034           CS0_R=1;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0001 0035           CS1_R=0;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0001 0036      }
; 0001 0037      else
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0001 0038      {
; 0001 0039           CS0_R=1;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0001 003A           CS1_R=1;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0001 003B      }
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0001 003C 
; 0001 003D      PWM_R = speed;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0001 003E }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;
