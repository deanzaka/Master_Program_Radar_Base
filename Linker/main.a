;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : Master Program Radar Base
;Version : 1.3
;Date    : 29/06/2014
;Author  : deanzaka
;Company : Solusi247
;Comments:
;
;
;Chip type               : ATmega162
;Program type            : Application
;AVR Core Clock frequency: 11,059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega162.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000004 VOL: 0
	#endif
;PCODE: $00000005 VOL: 0
;PCODE: $00000006 VOL: 0
;#include <string.h>
;#include <delay.h>
;#include "motor.h"
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART0 Receiver buffer
;#define RX_BUFFER_SIZE0 32
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
;#else
;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
;#endif
;
;// This flag is set on USART0 Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0000 004E {

	.CSEG
;PCODE: $00000007 VOL: 0
;PCODE: $00000008 VOL: 0
; 0000 004F char status,data;
; 0000 0050 status=UCSR0A;
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
; 0000 0051 data=UDR0;
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0052 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0053    {
; 0000 0054    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0055 #if RX_BUFFER_SIZE0 == 256
; 0000 0056    // special case for receiver buffer size=256
; 0000 0057    if (++rx_counter0 == 0)
; 0000 0058       {
; 0000 0059 #else
; 0000 005A    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 005B    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 005C       {
; 0000 005D       rx_counter0=0;
;PCODE: $00000020 VOL: 0
; 0000 005E #endif
; 0000 005F       rx_buffer_overflow0=1;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0060       }
; 0000 0061    }
;PCODE: $00000024 VOL: 0
; 0000 0062 }
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART0 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0069 {
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 006A char data;
; 0000 006B while (rx_counter0==0);
;PCODE: $0000002C VOL: 0
;	data -> R17
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 006C data=rx_buffer0[rx_rd_index0++];
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 006D #if RX_BUFFER_SIZE0 != 256
; 0000 006E if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 006F #endif
; 0000 0070 #asm("cli")
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
	cli
;PCODE: $0000003D VOL: 0
; 0000 0071 --rx_counter0;
;PCODE: $0000003E VOL: 0
; 0000 0072 #asm("sei")
;PCODE: $0000003F VOL: 0
	sei
;PCODE: $00000040 VOL: 0
; 0000 0073 return data;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0074 }
;PCODE: $00000044 VOL: 0
;#pragma used-
;#endif
;
;// USART0 Transmitter buffer
;#define TX_BUFFER_SIZE0 32
;char tx_buffer0[TX_BUFFER_SIZE0];
;
;#if TX_BUFFER_SIZE0 <= 256
;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
;#else
;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
;#endif
;
;// USART0 Transmitter interrupt service routine
;interrupt [USART0_TXC] void usart0_tx_isr(void)
; 0000 0084 {
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0085 if (tx_counter0)
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0086    {
; 0000 0087    --tx_counter0;
;PCODE: $00000049 VOL: 0
; 0000 0088    UDR0=tx_buffer0[tx_rd_index0++];
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0089 #if TX_BUFFER_SIZE0 != 256
; 0000 008A    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 008B #endif
; 0000 008C    }
;PCODE: $00000054 VOL: 0
; 0000 008D }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART0 Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 0094 {
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0095 while (tx_counter0 == TX_BUFFER_SIZE0);
;	c -> Y+0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0096 #asm("cli")
;PCODE: $00000061 VOL: 0
	cli
;PCODE: $00000062 VOL: 0
; 0000 0097 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0098    {
; 0000 0099    tx_buffer0[tx_wr_index0++]=c;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 009A #if TX_BUFFER_SIZE0 != 256
; 0000 009B    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 009C #endif
; 0000 009D    ++tx_counter0;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 009E    }
; 0000 009F else
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00A0    UDR0=c;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00A1 #asm("sei")
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
	sei
;PCODE: $0000007C VOL: 0
; 0000 00A2 }
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;#pragma used-
;#endif
;
;// USART1 Receiver buffer
;#define RX_BUFFER_SIZE1 32
;char rx_buffer1[RX_BUFFER_SIZE1];
;
;#if RX_BUFFER_SIZE1 <= 256
;unsigned char rx_wr_index1,rx_rd_index1,rx_counter1;
;#else
;unsigned int rx_wr_index1,rx_rd_index1,rx_counter1;
;#endif
;
;// This flag is set on USART1 Receiver buffer overflow
;bit rx_buffer_overflow1;
;
;// USART1 Receiver interrupt service routine
;interrupt [USART1_RXC] void usart1_rx_isr(void)
; 0000 00B5 {
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00B6 char status,data;
; 0000 00B7 status=UCSR1A;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00B8 data=UDR1;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00B9 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00BA    {
; 0000 00BB    rx_buffer1[rx_wr_index1++]=data;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00BC #if RX_BUFFER_SIZE1 == 256
; 0000 00BD    // special case for receiver buffer size=256
; 0000 00BE    if (++rx_counter1 == 0)
; 0000 00BF       {
; 0000 00C0 #else
; 0000 00C1    if (rx_wr_index1 == RX_BUFFER_SIZE1) rx_wr_index1=0;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00C2    if (++rx_counter1 == RX_BUFFER_SIZE1)
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00C3       {
; 0000 00C4       rx_counter1=0;
;PCODE: $00000099 VOL: 0
; 0000 00C5 #endif
; 0000 00C6       rx_buffer_overflow1=1;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00C7       }
; 0000 00C8    }
;PCODE: $0000009D VOL: 0
; 0000 00C9 }
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;
;// Get a character from the USART1 Receiver buffer
;#pragma used+
;char getchar1(void)
; 0000 00CE {
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00CF char data;
; 0000 00D0 while (rx_counter1==0);
;PCODE: $000000A5 VOL: 0
;	data -> R17
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00D1 data=rx_buffer1[rx_rd_index1++];
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00D2 #if RX_BUFFER_SIZE1 != 256
; 0000 00D3 if (rx_rd_index1 == RX_BUFFER_SIZE1) rx_rd_index1=0;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00D4 #endif
; 0000 00D5 #asm("cli")
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
	cli
;PCODE: $000000B6 VOL: 0
; 0000 00D6 --rx_counter1;
;PCODE: $000000B7 VOL: 0
; 0000 00D7 #asm("sei")
;PCODE: $000000B8 VOL: 0
	sei
;PCODE: $000000B9 VOL: 0
; 0000 00D8 return data;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00D9 }
;PCODE: $000000BD VOL: 0
;#pragma used-
;// USART1 Transmitter buffer
;#define TX_BUFFER_SIZE1 32
;char tx_buffer1[TX_BUFFER_SIZE1];
;
;#if TX_BUFFER_SIZE1 <= 256
;unsigned char tx_wr_index1,tx_rd_index1,tx_counter1;
;#else
;unsigned int tx_wr_index1,tx_rd_index1,tx_counter1;
;#endif
;
;// USART1 Transmitter interrupt service routine
;interrupt [USART1_TXC] void usart1_tx_isr(void)
; 0000 00E7 {
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00E8 if (tx_counter1)
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00E9    {
; 0000 00EA    --tx_counter1;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00EB    UDR1=tx_buffer1[tx_rd_index1++];
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00EC #if TX_BUFFER_SIZE1 != 256
; 0000 00ED    if (tx_rd_index1 == TX_BUFFER_SIZE1) tx_rd_index1=0;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00EE #endif
; 0000 00EF    }
;PCODE: $000000D3 VOL: 0
; 0000 00F0 }
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;
;// Write a character to the USART1 Transmitter buffer
;#pragma used+
;void putchar1(char c)
; 0000 00F5 {
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00F6 while (tx_counter1 == TX_BUFFER_SIZE1);
;	c -> Y+0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00F7 #asm("cli")
;PCODE: $000000E0 VOL: 0
	cli
;PCODE: $000000E1 VOL: 0
; 0000 00F8 if (tx_counter1 || ((UCSR1A & DATA_REGISTER_EMPTY)==0))
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00F9    {
; 0000 00FA    tx_buffer1[tx_wr_index1++]=c;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00FB #if TX_BUFFER_SIZE1 != 256
; 0000 00FC    if (tx_wr_index1 == TX_BUFFER_SIZE1) tx_wr_index1=0;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00FD #endif
; 0000 00FE    ++tx_counter1;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00FF    }
; 0000 0100 else
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0101    UDR1=c;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0102 #asm("sei")
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
	sei
;PCODE: $000000FE VOL: 0
; 0000 0103 }
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;#pragma used-
;
;#pragma used+
;void printf1(char *st)
; 0000 0108 {
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0109     int i, c;
; 0000 010A     i = strlen(st);
;PCODE: $00000104 VOL: 0
;	*st -> Y+4
;	i -> R16,R17
;	c -> R18,R19
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 010B 
; 0000 010C     for(c = 0; c < i; c++)
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 010D     {
; 0000 010E         putchar1(st[c]);
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 010F     }
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0110 }
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;#pragma used-
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Declare your global variables here
;
;void main(void)
; 0000 0119 {
;PCODE: $00000121 VOL: 0
; 0000 011A // Declare your local variables here
; 0000 011B 
; 0000 011C // Crystal Oscillator division factor: 1
; 0000 011D #pragma optsize-
; 0000 011E CLKPR=0x80;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 011F CLKPR=0x00;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 0120 #ifdef _OPTIMIZE_SIZE_
; 0000 0121 #pragma optsize+
; 0000 0122 #endif
; 0000 0123 
; 0000 0124 // Input/Output Ports initialization
; 0000 0125 // Port A initialization
; 0000 0126 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0127 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0128 PORTA=0x00;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 0129 DDRA=0x00;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 012A 
; 0000 012B // Port B initialization
; 0000 012C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 012D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 012E PORTB=0x00;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 012F DDRB=0x00;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 0130 
; 0000 0131 // Port C initialization
; 0000 0132 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0133 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0134 PORTC=0x00;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 0135 DDRC=0x00;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0136 
; 0000 0137 // Port D initialization
; 0000 0138 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0139 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 013A PORTD=0x00;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 013B DDRD=0x00;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 013C 
; 0000 013D // Port E initialization
; 0000 013E // Func2=In Func1=In Func0=In
; 0000 013F // State2=T State1=T State0=T
; 0000 0140 PORTE=0x00;
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 0141 DDRE=0x00;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 0142 
; 0000 0143 // Timer/Counter 0 initialization
; 0000 0144 // Clock source: System Clock
; 0000 0145 // Clock value: Timer 0 Stopped
; 0000 0146 // Mode: Normal top=0xFF
; 0000 0147 // OC0 output: Disconnected
; 0000 0148 TCCR0=0x00;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0149 TCNT0=0x00;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 014A OCR0=0x00;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 014B 
; 0000 014C // Timer/Counter 1 initialization
; 0000 014D // Clock source: System Clock
; 0000 014E // Clock value: Timer1 Stopped
; 0000 014F // Mode: Normal top=0xFFFF
; 0000 0150 // OC1A output: Discon.
; 0000 0151 // OC1B output: Discon.
; 0000 0152 // Noise Canceler: Off
; 0000 0153 // Input Capture on Falling Edge
; 0000 0154 // Timer1 Overflow Interrupt: Off
; 0000 0155 // Input Capture Interrupt: Off
; 0000 0156 // Compare A Match Interrupt: Off
; 0000 0157 // Compare B Match Interrupt: Off
; 0000 0158 TCCR1A=0x00;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 0159 TCCR1B=0x00;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 015A TCNT1H=0x00;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 015B TCNT1L=0x00;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 015C ICR1H=0x00;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 015D ICR1L=0x00;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 015E OCR1AH=0x00;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 015F OCR1AL=0x00;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0160 OCR1BH=0x00;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0161 OCR1BL=0x00;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0162 
; 0000 0163 // Timer/Counter 2 initialization
; 0000 0164 // Clock source: System Clock
; 0000 0165 // Clock value: Timer2 Stopped
; 0000 0166 // Mode: Normal top=0xFF
; 0000 0167 // OC2 output: Disconnected
; 0000 0168 ASSR=0x00;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 0169 TCCR2=0x00;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 016A TCNT2=0x00;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 016B OCR2=0x00;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 016C 
; 0000 016D // Timer/Counter 3 initialization
; 0000 016E // Clock value: Timer3 Stopped
; 0000 016F // Mode: Normal top=0xFFFF
; 0000 0170 // OC3A output: Discon.
; 0000 0171 // OC3B output: Discon.
; 0000 0172 // Noise Canceler: Off
; 0000 0173 // Input Capture on Falling Edge
; 0000 0174 // Timer3 Overflow Interrupt: Off
; 0000 0175 // Input Capture Interrupt: Off
; 0000 0176 // Compare A Match Interrupt: Off
; 0000 0177 // Compare B Match Interrupt: Off
; 0000 0178 TCCR3A=0x00;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 0179 TCCR3B=0x00;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 017A TCNT3H=0x00;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 017B TCNT3L=0x00;
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 017C ICR3H=0x00;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 017D ICR3L=0x00;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 017E OCR3AH=0x00;
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 017F OCR3AL=0x00;
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 0180 OCR3BH=0x00;
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 0181 OCR3BL=0x00;
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 0182 
; 0000 0183 // External Interrupt(s) initialization
; 0000 0184 // INT0: Off
; 0000 0185 // INT1: Off
; 0000 0186 // INT2: Off
; 0000 0187 // Interrupt on any change on pins PCINT0-7: Off
; 0000 0188 // Interrupt on any change on pins PCINT8-15: Off
; 0000 0189 MCUCR=0x00;
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 018A EMCUCR=0x00;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 018B 
; 0000 018C // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 018D TIMSK=0x00;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 018E 
; 0000 018F ETIMSK=0x00;
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 0190 
; 0000 0191 // USART0 initialization
; 0000 0192 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0193 // USART0 Receiver: On
; 0000 0194 // USART0 Transmitter: On
; 0000 0195 // USART0 Mode: Asynchronous
; 0000 0196 // USART0 Baud Rate: 57600
; 0000 0197 UCSR0A=0x00;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 0198 UCSR0B=0xD8;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 0199 UCSR0C=0x86;
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 019A UBRR0H=0x00;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 019B UBRR0L=0x0B;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 019C 
; 0000 019D // USART1 initialization
; 0000 019E // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 019F // USART1 Receiver: On
; 0000 01A0 // USART1 Transmitter: On
; 0000 01A1 // USART1 Mode: Asynchronous
; 0000 01A2 // USART1 Baud Rate: 57600
; 0000 01A3 UCSR1A=0x00;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 01A4 UCSR1B=0xD8;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 01A5 UCSR1C=0x86;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 01A6 UBRR1H=0x00;
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 01A7 UBRR1L=0x0B;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 01A8 
; 0000 01A9 // Analog Comparator initialization
; 0000 01AA // Analog Comparator: Off
; 0000 01AB // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 01AC ACSR=0x80;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 01AD 
; 0000 01AE // SPI initialization
; 0000 01AF // SPI disabled
; 0000 01B0 SPCR=0x00;
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 01B1 
; 0000 01B2 // Global enable interrupts
; 0000 01B3 #asm("sei")
;PCODE: $00000190 VOL: 0
	sei
;PCODE: $00000191 VOL: 0
; 0000 01B4 
; 0000 01B5 motor_set();
;PCODE: $00000192 VOL: 0
; 0000 01B6 while (1)
;PCODE: $00000193 VOL: 0
; 0000 01B7       {
; 0000 01B8       // Place your code here
; 0000 01B9       if(rx_counter0) putchar1(getchar());
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 01BA       if(rx_counter1) putchar(getchar1());
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 01BB 
; 0000 01BC       motor(CW, 800);
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 01BD       }
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 01BE }
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
